/* eslint-disable @typescript-eslint/no-misused-promises */
import express from 'express';
import './libraries/request';
import { auth } from './middleware/auth';
import { manageReschedulingAuth } from './middleware/manage-rescheduling-auth';
import { asyncErrorHandler } from './middleware/error-handler';
import { validateRequest, conditionalValidateRequest } from './middleware/request-validator';
import paymentConfirmation from './pages/book-a-test/payment-confirmation';
import bookingConfirmation from './pages/common/booking-confirmation';
import contactDetails from './pages/book-a-test/contact-details';
import testType from './pages/common/test-type';
import checkYourAnswers from './pages/check-your-answers/check-your-answers';
import chooseAppointment from './pages/choose-appointment/choose-appointment';
import candidateDetails from './pages/candidate-details/candidate-details';
import selectTestCentre from './pages/select-test-centre/select-test-centre';
import start from './pages/govuk/start';
import selectLanguage from './pages/select-language/select-language';
import findTestCentre from './pages/find-test-centre/find-test-centre';
import selectDate from './pages/select-date/select-date';
import changeLocationTime from './pages/check-your-answers/change-location-time';
import manageBookingStart from './pages/manage-booking/start';
import manageBookingLogin from './pages/manage-booking/login';
import manageBookingHome from './pages/manage-booking/home';
import manageBookingChange from './pages/manage-booking/change';
import manageBookingCancel from './pages/manage-booking/cancel';
import manageBookingCheckChange from './pages/manage-booking/check-change';
import voiceover from './pages/common/voiceover';
import chooseSupport from './pages/common/choose-support';
import britishSignLanguage from './pages/manage-booking/british-sign-language';
import translator from './pages/supported/translator';
import leavingNSA from './pages/supported/leaving-nsa';
import stayingNSA from './pages/supported/staying-nsa';
import customSupport from './pages/supported/custom-support';
import selectSupportType from './pages/supported/select-support-type';
import telephoneContact from './pages/supported/telephone-contact';
import voicemail from './pages/supported/voicemail';
import preferredDay from './pages/supported/preferred-day';
import preferredLocation from './pages/supported/preferred-location';

const router = express.Router();

router.get('/', start.get);
router.get('/choose-support', chooseSupport.get);
router.post('/choose-support', validateRequest(chooseSupport.postSchemaValidation()), chooseSupport.post);
router.get('/candidate-details', candidateDetails.get);
router.post('/candidate-details', validateRequest(candidateDetails.postSchemaValidation), candidateDetails.post);
router.get('/contact-details', auth, contactDetails.get);
router.post('/contact-details', auth, validateRequest(contactDetails.postSchemaValidation()), contactDetails.post);
router.get('/test-type', auth, asyncErrorHandler(testType.get));
router.post('/test-type', auth, validateRequest(testType.postSchemaValidation), asyncErrorHandler(testType.post));
router.get('/test-language', auth, selectLanguage.get);
router.post('/test-language', auth, validateRequest(selectLanguage.testLanguagePostSchema()), selectLanguage.post);
router.get('/find-test-centre', auth, findTestCentre.get);
router.post('/find-test-centre', auth, validateRequest(findTestCentre.postSchemaValidation), findTestCentre.post);
router.get('/select-test-centre', auth, validateRequest(selectTestCentre.getSchemaValidation()), asyncErrorHandler(selectTestCentre.get));
router.post('/select-test-centre', auth, validateRequest(selectTestCentre.postSchemaValidation()), selectTestCentre.post);
router.get('/select-date', auth, selectDate.get);
router.post('/select-date', auth, validateRequest(selectDate.postSchemaValidation), asyncErrorHandler(selectDate.post));
router.get('/choose-appointment', auth, validateRequest(chooseAppointment.getSchemaValidation), asyncErrorHandler(chooseAppointment.get));
router.post('/choose-appointment', auth, validateRequest(chooseAppointment.postSchemaValidation), asyncErrorHandler(chooseAppointment.post));
router.get('/check-your-answers', auth, checkYourAnswers.get);
router.post('/check-your-answers', auth, asyncErrorHandler(checkYourAnswers.post));
router.get('/bsl', auth, asyncErrorHandler(britishSignLanguage.get));
router.post('/bsl', auth, validateRequest(britishSignLanguage.postSchemaValidation), asyncErrorHandler(britishSignLanguage.post));
router.get('/voiceover', auth, asyncErrorHandler(voiceover.get));
router.post('/voiceover', auth, validateRequest(voiceover.voiceoverPostSchema()), asyncErrorHandler(voiceover.post));
router.get('/payment-confirmation', auth, asyncErrorHandler(paymentConfirmation.get));
router.get('/booking-confirmation', auth, bookingConfirmation.get);
router.get('/change-location-time', auth, changeLocationTime.get);
router.post('/change-location-time', auth, validateRequest(changeLocationTime.postSchema), changeLocationTime.post);
router.get('/change-voiceover', auth, asyncErrorHandler(voiceover.get));
router.post('/change-voiceover', auth, validateRequest(voiceover.voiceoverPostSchema()), voiceover.post);
router.get('/translator', auth, translator.get);
router.post('/translator', auth, validateRequest(translator.postSchemaValidation), asyncErrorHandler(translator.post));

router.get(['/manage-booking', '/manage-booking/start'], manageBookingStart.get); // Mock 'start' page for manage booking
router.get('/manage-booking/login', manageBookingLogin.get);
router.post('/manage-booking/login', validateRequest(manageBookingLogin.postSchemaValidation), manageBookingLogin.post);
router.get('/manage-booking/home', asyncErrorHandler(manageBookingHome.get));
router.get('/manage-change-location-time/:ref', changeLocationTime.get);
router.post('/manage-change-location-time/:ref', validateRequest(changeLocationTime.postSchema), changeLocationTime.post);
router.get('/manage-booking/choose-appointment', manageReschedulingAuth, validateRequest(chooseAppointment.getSchemaValidation), asyncErrorHandler(chooseAppointment.get));
router.post('/manage-booking/choose-appointment', manageReschedulingAuth, validateRequest(chooseAppointment.postSchemaValidation), asyncErrorHandler(chooseAppointment.post));
router.get('/manage-booking/select-date', manageReschedulingAuth, selectDate.get);
router.post('/manage-booking/select-date', manageReschedulingAuth, validateRequest(selectDate.postSchemaValidation), asyncErrorHandler(selectDate.post));
router.get('/manage-booking/find-test-centre', manageReschedulingAuth, findTestCentre.get);
router.post('/manage-booking/find-test-centre', manageReschedulingAuth, validateRequest(findTestCentre.postSchemaValidation), findTestCentre.post);
router.get('/manage-booking/select-test-centre', manageReschedulingAuth, validateRequest(selectTestCentre.getSchemaValidation()), asyncErrorHandler(selectTestCentre.get));
router.post('/manage-booking/select-test-centre', manageReschedulingAuth, validateRequest(selectTestCentre.postSchemaValidation()), selectTestCentre.post);
router.get('/manage-booking/check-change', manageReschedulingAuth, asyncErrorHandler(manageBookingCheckChange.get));
router.post('/manage-booking/check-change', manageReschedulingAuth, asyncErrorHandler(manageBookingCheckChange.post));
router.get('/manage-booking/check-change/reset', manageReschedulingAuth, asyncErrorHandler(manageBookingCheckChange.reset));
router.get('/manage-booking/test-language', manageReschedulingAuth, asyncErrorHandler(selectLanguage.get));
router.post('/manage-booking/test-language', manageReschedulingAuth, validateRequest(selectLanguage.testLanguagePostSchema()), asyncErrorHandler(selectLanguage.post));
router.get('/manage-booking/voiceover', manageReschedulingAuth, asyncErrorHandler(voiceover.get));
router.post('/manage-booking/voiceover', manageReschedulingAuth, validateRequest(voiceover.voiceoverPostSchema()), voiceover.post);
router.get('/manage-booking/bsl', manageReschedulingAuth, asyncErrorHandler(britishSignLanguage.get));
router.post('/manage-booking/bsl', manageReschedulingAuth, validateRequest(britishSignLanguage.postSchemaValidation), asyncErrorHandler(britishSignLanguage.post));
router.get('/manage-booking/:ref', asyncErrorHandler(manageBookingChange.get));
router.get('/manage-booking/:ref/cancel', manageBookingCancel.get);
router.post('/manage-booking/:ref/cancel', asyncErrorHandler(manageBookingCancel.post));

router.get('/leaving-nsa', auth, leavingNSA.get);
router.post('/leaving-nsa', auth, asyncErrorHandler(leavingNSA.post));
router.get('/staying-nsa', auth, stayingNSA.get);
router.get('/custom-support', auth, customSupport.get);
router.post('/custom-support', auth, validateRequest(customSupport.postSchemaValidation()), customSupport.post);
router.get('/select-support-type', auth, selectSupportType.get);
router.post('/select-support-type', auth, validateRequest(selectSupportType.postSchemaValidation()), asyncErrorHandler(selectSupportType.post));
router.get('/telephone-contact', auth, telephoneContact.get);
router.post('/telephone-contact', auth, conditionalValidateRequest(telephoneContact.postSchemaValidation), telephoneContact.post);
router.get('/voicemail', auth, voicemail.get);
router.post('/voicemail', auth, validateRequest(voicemail.postSchemaValidation()), voicemail.post);
router.get('/preferred-day', auth, preferredDay.get);
router.post('/preferred-day', auth, conditionalValidateRequest(preferredDay.postSchemaValidation), preferredDay.post);
router.get('/preferred-location', auth, preferredLocation.get);
router.post('/preferred-location', auth, conditionalValidateRequest(preferredLocation.postSchemaValidation), preferredLocation.post);

export default router;
